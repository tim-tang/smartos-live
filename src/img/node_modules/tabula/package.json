{
  "name": "tabula",
  "description": "a light function for printing a text table to stdout",
  "version": "1.4.1",
  "author": {
    "name": "Trent Mick",
    "email": "trentm@gmail.com",
    "url": "http://trentm.com"
  },
  "main": "./lib/tabula.js",
  "bin": {
    "tabula": "./bin/tabula"
  },
  "homepage": "https://github.com/trentm/node-tabula",
  "keywords": [
    "table",
    "stdout",
    "tabulate"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/trentm/node-tabula.git"
  },
  "engines": {
    "node": ">=0.10"
  },
  "dependencies": {
    "assert-plus": "0.1.5",
    "dashdash": "1.6.0",
    "extsprintf": "1.2.0"
  },
  "devDependencies": {
    "nodeunit": "0.9.x",
    "glob": "4.0.x"
  },
  "scripts": {
    "test": "make test"
  },
  "contributors": [
    {
      "name": "Trent Mick",
      "email": "trentm@gmail.com",
      "url": "http://trentm.com"
    }
  ],
  "readme": "A light `tabula(items, options)` function for printing a text table\nto stdout.\n\nWhy another one? I had one that worked for me and wanted to re-use it. Trawling\nthrough dozens of available ones on npm was a chore I haven't done. I'd welcome\na table-printing node.js bake off.\n\n\n# Install\n\n    npm install tabula\n\n\n# Usage\n\n```javascript\nvar tabula = require('tabula');\n\nvar items = [\n    {name: 'trent', age: 38, game: 'hockey'},\n    {name: 'ewan', age: 4, game: 'chess'}\n];\n\ntabula(items);\n/* prints:\nNAME   AGE  GAME\ntrent  38   hockey\newan   4    chess\n*/\n\ntabula(items, {columns: ['name', 'age']});\n/* prints:\nNAME   AGE\ntrent  38\newan   4\n*/\n\ntabula(items, {\n    columns: ['name', 'age'],\n    skipHeader: true\n});\n/* prints:\ntrent  38\newan   4\n*/\n\n// Sort by age. Attempts numeric sort on given fields.\n// Note: This actually sorts the given `items` array in-place.\ntabula(items, {\n    columns: ['name', 'age'],\n    sort: ['age']\n});\n/* prints:\nNAME   AGE\newan   4\ntrent  38\n*/\n```\n\n\n# `tabula` CLI\n\nThere is also a `tabula` CLI that can be used for emitting a table\nfrom a stream of JSON objects (or a single JSON array). E.g.:\n\n    $ echo '[{\"name\":\"trent\",\"age\":38}, {\"name\":\"ewan\",\"age\":4}]' | tabula\n    NAME   AGE\n    trent  38\n    ewan   4\n\n    # column selection\n    $ echo '[{\"name\":\"trent\",\"age\":38}, {\"name\":\"ewan\",\"age\":4}]' | tabula name\n    NAME\n    trent\n    ewan\n\n    # sorting\n    $ echo '[{\"name\":\"trent\",\"age\":38}, {\"name\":\"ewan\",\"age\":4}]' | tabula -s age\n    NAME   AGE\n    ewan   4\n    trent  38\n\n\n\n# TODO\n\n- Describe the \"opinions\", features and limitations of this module.\n\n- `tabula` CLI for piping in a JSON array of objects, or stream of objects.\n    - streaming\n    - option for skipping non-JSON lines (e.g. for bunyan logs)\n    - option for non-JSON input? e.g. space separated ('json -ga foo bar'\n      output, output from other table-emitting things, perhaps then 2-space\n      or more separated), naive-csv\n    - separate tabula-cli module?\n    - test cases\n\n- Merge this with [node-tab](https://github.com/davepacheco/node-tab) if\n  reasonable. I have some PR work for it (that I haven't completed) to add some\n  conveniences that `tabulate` provides. It is silly to have two table-printing\n  libs in play.\n\n\n# License\n\nMIT. See LICENSE.txt.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/trentm/node-tabula/issues"
  },
  "_id": "tabula@1.4.1",
  "_shasum": "5ef595dab9c5021a2919cc69203ba5dd72318f2d",
  "_from": "tabula@1.4.1",
  "_resolved": "https://registry.npmjs.org/tabula/-/tabula-1.4.1.tgz"
}
